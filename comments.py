from libbgg.apiv2 import BGG
import nltk
import numpy as np
import json
import pandas as pd
import requests
import re
from time import sleep
#217974, 199908

def get_ids(pages):
    id_list = []
    for i in range(pages):
        f = requests.get("https://boardgamegeek.com/browse/boardgame/page/"+str(i+1)+".html")
        m = re.findall('metasell/thing/(.*?)"',f.text)
        id_list.extend(m)
    
    return [int(id) for id in id_list]

def analyse_comments(filename, word):
    with open(filename) as json_data:
        gamelist = json.load(json_data)
        
    with open('from300.json') as json_data:
        gamelist2 = json.load(json_data)
        
    with open('from400.json') as json_data:
        gamelist3 = json.load(json_data)
        
    gamelist.extend(gamelist2)
    gamelist.extend(gamelist3)
    
    results = []
    for game in gamelist:
        try:
            rated = [comment['value'] for comment in game['comments'] if comment['rating']!='N/A']
        except:
            continue
        freq = 100*float(sum(1 for i in rated if word in i.lower()))/float(len(rated))
        results.append((game['title'],freq))
    results = pd.DataFrame(results,columns=['title','term %']).sort_values('term %',ascending=False)
    return results
    
    
    
#100*sum(1 for i in rated if "bankrupt" in i.lower())/len(rated)
def save_comments(pages,filename):
    id_list = [155703, 3307, 39938, 155987, 15062, 140603, 150, 9674, 1513, 15363, 159508, 18, 133473, 192457, 192153, 181521, 42776, 22827, 119432, 189932, 31999, 65532, 50750, 121288, 2346, 21790, 134726, 166384, 586, 58281, 191862, 121408, 20437, 167400, 131357, 18098, 140934, 27746, 24800, 192836, 31730, 163166, 26997, 36235, 155624, 143519, 47, 11, 128780, 79127, 191189, 30869, 1353, 135219, 113997, 151022, 144189, 153938, 148575, 160499, 160010, 111341, 20963, 177639, 9823, 183251, 199042, 4390, 70512, 137988, 150997, 10547, 372, 42215, 28181, 113294, 15364, 30380, 206718, 3201, 6249, 126792, 160495, 88, 38996, 110277, 21763, 12942, 206941, 91312, 68425, 82421, 28023, 2163, 162007, 24508, 31563, 103886, 82420, 171, 172308, 174785, 199561, 194607, 65901, 168584, 55600, 41002, 22345, 37904, 156009, 47185, 156689, 117915, 35570, 123540, 180511, 158275, 41066, 91872, 13004, 46, 12891, 503, 73761, 107529, 130960, 43528, 146278, 139898, 132028, 94, 144797, 30957, 151004, 84419, 156336, 158889, 180974, 143741, 1035, 131287, 100423, 27976, 163602, 12962, 26566, 528, 181530, 137269, 143515, 203420, 155362, 2181, 111799, 169426, 1345, 12002, 5782, 148319, 168435, 92415, 156943, 29603, 7717, 9440, 69779, 21882, 491, 69789, 483, 98351, 108784, 169124, 12902, 1041, 173442, 85897, 8125, 162286, 158600, 52461, 156566, 20100, 106217, 66356, 13642, 53953, 2453, 119788, 939, 45986, 132018, 29368, 171499, 72225, 117959, 108906, 2955, 240, 71721, 40628, 95064, 129948, 161417, 145659, 19600, 193558, 554, 89409, 209778, 131646, 147151, 170416, 202408, 199478, 1301, 67492, 191977, 8051, 168917, 174570, 171273, 38823, 22825, 904, 1822, 30645, 165401, 160018, 171669, 45, 37380, 192135, 8045, 122298, 51, 699, 173, 2398, 194594, 65244, 162886, 104710, 26990, 60, 141517, 200147, 432, 161866, 98229, 224, 55427, 66505, 160851, 156776, 104363, 169654, 156546, 204305, 16747, 172047, 72287, 38054, 72321, 177590, 135382, 154458, 27588, 153016, 161533, 59946, 175117, 551, 137649, 50768, 91514, 94246, 122522, 15817, 97903, 165838, 18100, 2093, 177678, 104020, 25568, 41, 66056, 151007, 17396, 5737, 219513, 150999, 157403, 194879, 171233, 142326, 212445, 23094, 57390, 35497, 37759, 38159, 179803, 68264, 136991, 193042, 71671, 1634, 27364, 179275, 170561, 42910, 180680, 327, 124, 4099, 25669, 152162, 121410, 34084, 127518, 154825, 17405, 165722, 8203, 91536, 157526, 1608, 230, 159473, 30618, 130176, 164265, 37628, 39953, 44163, 30381, 132372, 200077, 2507, 178336, 121297, 221, 158435, 21523, 1382, 207691, 185589, 91873, 19100, 183880, 823, 204027, 173064, 157001, 1465, 213893, 131260, 855, 8989, 123955, 56692, 833, 154086, 15126, 53093, 37836, 154246, 60435, 143884, 25821, 25643, 91080, 153065, 203427, 24068, 181687, 18258, 191231, 1261, 201921, 174660, 527, 35815, 17329, 195539, 11825, 95103, 125678, 75449, 180593, 183840, 164338, 179172, 40793, 43022, 96007, 278, 140933, 13823, 6830, 12495, 147303, 111124, 120523, 119591, 105037, 156091, 37919, 1159, 105, 188920, 134352, 144041, 145639, 47055, 104347, 20542, 42452, 22141, 12995, 102548, 175199, 75165, 16395, 224037, 154386, 109125, 159109, 137297, 176544, 106, 138649, 66, 152470, 21441, 16992, 103, 9203, 29934, 902, 10640, 35052, 33604, 157809, 72991, 10, 15, 150312, 129051, 123499, 131014, 2338, 143405, 156714, 117985, 160902, 152, 163154, 354, 39684, 43443, 122294, 125548, 112, 7480, 878, 171879, 177802, 13780, 176229, 58936, 492, 1231, 193949, 13884, 19999, 138431, 16986, 163413, 30658, 123607, 142992, 207336, 34194, 22038, 1897, 22484, 176165, 16496, 6205, 196, 195137, 55697, 24417, 423, 94362, 826, 106662, 200954, 3072, 61692, 15512, 9220, 63268, 127024, 92319, 101785, 134253, 166226, 1540, 160610, 681, 41916, 9446, 85256, 38862, 220, 26, 6411, 143986, 191051, 198953, 3800, 40270, 19237, 139030, 481, 1115, 181796, 165986, 182340, 12761, 179572, 2081, 112138, 139771, 148943, 177524, 67254, 38343, 113873, 146221, 134453, 21550, 26457, 167270, 203417, 73369, 184424, 187617, 3284, 83195, 5716, 129459, 1499, 57925, 142079, 2842, 88827, 41933, 197443, 142961, 165872, 115, 147253, 203416, 730, 71836, 146418, 22, 19622, 1403, 1915, 103185, 94104, 701, 152765, 113401, 197070, 7805, 173090, 141423, 394, 37387, 42487, 6351, 103092, 24827, 191300, 37907, 254, 191876, 242, 24773, 142852, 21920, 168, 2122, 194880, 90040, 594, 131111, 38765, 195162, 148951, 38863, 205398, 187377, 157096, 149155, 181810, 5206, 107255, 131366, 207830, 172381, 175223, 168998, 144529, 70, 87890, 172220, 131325, 158900, 29937, 31497, 138233, 35435, 182694, 135779, 37358, 180040, 34887, 111417, 104955, 2393, 122842, 39339, 204836, 143185, 201, 91984, 42124, 14254, 3565, 36522, 168609, 1662, 37141, 84, 178054, 71906, 620, 125752, 55829, 204, 624, 181524, 3228, 113636, 199, 197405, 82168, 179460, 116, 21954, 56931, 92190, 1887, 73, 3955, 2987, 172385, 180899, 10093, 136280, 38992, 1829, 170771, 18745, 38386, 33451, 8129, 23679, 2808, 157, 169794, 75476, 167513, 986, 195544, 2961, 40209, 111105, 180852, 122240, 128442, 54361, 36811, 8098, 9910, 86246, 116954, 119, 28089, 237, 63543, 99975, 202670, 3931, 205716, 1568, 195571, 149951, 494, 4396, 38545, 361, 168788, 232, 102435, 438, 65564, 1544, 175307, 24703, 71074, 43868, 155255, 192860, 915, 2065, 24742, 15953, 166857, 81640, 15818, 91620, 15511, 13308, 25224, 141736, 31552, 442, 171726, 31105, 85005, 2397, 118174, 32666, 32125, 63759, 619, 157026, 21133, 12477, 925, 17710, 171011, 159503, 35503, 67239, 165950, 165948, 2570, 41749, 15839, 145189, 144568, 123096, 179303, 28259, 85036, 19526, 73316, 46396, 39217, 89910, 6779, 169611, 4636, 31759, 2251, 153064, 175293, 124172, 114031, 145371, 424, 220520, 27627, 12166, 144239, 31624, 134157, 22348, 66588, 171662, 903, 157413, 34707, 118536, 929, 13551, 40769, 16267, 150145, 58110, 8190, 128898, 194626, 17223, 144826, 5781, 24310, 25277, 8481, 42673, 120, 1442, 120217, 12589, 340, 35761, 33154, 9215, 68182, 40760, 118695, 22143, 148601, 5072, 41010, 46255, 85325, 75358, 249, 113289, 62220, 16772, 118063, 180592, 71882, 169416, 66214, 29972, 9027, 117, 168681, 142121, 1032, 119391, 3353, 71061, 172996, 133632, 29223, 98, 158339, 1198, 21551, 36399, 40393, 32412, 112686, 195314, 143401, 38718, 66510, 39927, 1117, 57660, 4741, 123219, 43152, 187653, 11057, 109291, 54137, 3720, 155969, 162388, 128721, 123609, 205597, 130, 127997, 18748, 9341, 20134, 49, 31483, 128667, 1107, 77, 6901, 40237, 175095, 472, 104581, 29839, 176558, 589, 1234, 15510, 65515, 88408, 192074, 38531, 193737, 398, 137330, 30367, 124052, 66171, 98315, 136056, 111732, 22877, 182189, 631, 72, 83734, 12750, 177478, 41863, 12005, 176083, 163370, 76417, 592, 195528, 15600, 217372, 94480, 27848, 38309, 92044, 83667, 144864, 174078, 99, 40529, 126100, 67185, 173101, 11971, 124965, 19764, 166571, 67928, 1155, 154182, 32674, 384, 143404, 196202, 73070, 153507, 14, 19995, 156858, 76150, 157917, 146816, 175621, 216459, 22897, 9441, 183006, 511, 122588, 443, 29073, 154509, 54307, 36400, 36648, 28, 166286, 174973, 158572, 34585, 4218, 151247, 128445, 65282, 126996, 67180, 10997, 2596, 139899, 4192, 144415, 337, 198525, 198487]    
    id_list = id_list[100:200]   
    
#    id_list = get_ids(pages)
    json_output = []
    
    for id in id_list:
        comments = get_comments(id)
        json_output.append(comments)
        
    with open(filename, 'w') as outfile:
        json.dump(json_output,outfile)

    

def analyse(game_id):

    comments = get_comments(game_id)
    
    #strip unrated
    rated = [comment['value'] for comment in comments if comment['rating']!='N/A']
    
#    high = [comment['value'] for comment in rated if float(comment['rating']) >= 9]
#    low = [comment['value'] for comment in rated if float(comment['rating']) < 6]
    
    highstring = ' '.join(rated)
#    lowstring = ' '.join(low)

#    stopwords = nltk.corpus.stopwords.words('english')
#    stopwords.extend(
#        ['game','play','one','games','best','like','played','players','love','great','really','time','good','much','get','...','would']
#    )
#    highwords = nltk.tokenize.word_tokenize(highstring)

    return rated
#    return (game_id, highstring)
#    highworddist = nltk.FreqDist(w.lower() for w in highwords if len(w)>2 and w.lower() not in stopwords)

#    lowwords = nltk.tokenize.word_tokenize(lowstring)
#    lowworddist = nltk.FreqDist(w.lower() for w in lowwords if len(w)>2 and w.lower() not in stopwords)

#    print(highworddist.most_common(20))
#    print(lowworddist.most_common(20))
    
    
def get_comments(game_id):
    bgg = BGG()
    game_tree = bgg.boardgame(game_id,comments=True)
    game = game_tree['items']['item']
    ncomments = int(game['comments']['totalitems'])
    try:
        title = game['name']['value']
    except:
        title = game['name'][0]['value']
    comments = []
    print(title)
    for i in range(1,int(np.ceil(ncomments/100))+1):
        try:
            game_tree = bgg.boardgame(game_id,comments=True,pagesize=100,page=i)
        except:
            continue
        game = game_tree['items']['item']
        comments.extend(game['comments']['comment'])
        sleep(1)
        print(i)
        
    comments = {'id':game_id,'title':title,'comments':comments}
    return comments